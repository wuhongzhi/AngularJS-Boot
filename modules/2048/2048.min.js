define(["require","exports","application"],function(i,t,e){"use strict";var n=angular.module("twentyfourtyeightApp",["Game","Grid","Keyboard","ngAnimate","ngCookies"]);angular.extend(t,{name:n.name,module:function(t){i([e.$$cacheUrl("style!modules/2048/2048.css")],function(){t(n)})}}),n.config(["GridServiceProvider",function(i){i.setSize(4)}]).controller("GameController",["GameManager","KeyboardService","$location",function(i,t,e){this.game=i,this.newGame=function(){t.init(),this.game.newGame(),this.startGame()},this.startGame=function(){var i=this;t.on(function(t){i.game.move(t)})},this.tryAgain=function(){e.path("/modules/logon/main")},this.newGame()}]),angular.module("Grid",[]).factory("GenerateUniqueId",function(){return{next:function(){return function(){var i=(new Date).getTime();return"xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx".replace(/[xy]/g,function(t){var e=(i+16*Math.random())%16|0;return i=Math.floor(i/16),("x"===t?e:7&e|8).toString(16)})}()}}}).factory("TileModel",["GenerateUniqueId",function(i){var t=function(t,e){this.x=t.x,this.y=t.y,this.value=e||2,this.id=i.next(),this.merged=null};return t.prototype.savePosition=function(){this.originalX=this.x,this.originalY=this.y},t.prototype.reset=function(){this.merged=null},t.prototype.setMergedBy=function(i){var t=this;i.forEach(function(i){i.merged=!0,i.updatePosition(t.getPosition())})},t.prototype.updateValue=function(i){this.value=i},t.prototype.updatePosition=function(i){this.x=i.x,this.y=i.y},t.prototype.getPosition=function(){return{x:this.x,y:this.y}},t}]).provider("GridService",function(){this.size=4,this.startingTileNumber=2,this.setSize=function(i){this.size=i||0},this.setStartingTiles=function(i){this.startingTileNumber=i};var i=this;this.$get=["TileModel",function(t){this.grid=[],this.tiles=[];var e={left:{x:-1,y:0},right:{x:1,y:0},up:{x:0,y:-1},down:{x:0,y:1}};return this.getSize=function(){return i.size},this.buildEmptyGameBoard=function(){for(var t=this,e=0;e<i.size*i.size;e++)this.grid[e]=null;this.forEach(function(i,e){t.setCellAt({x:i,y:e},null)})},this.prepareTiles=function(){this.forEach(function(i,t,e){e&&(e.savePosition(),e.reset())})},this.traversalDirections=function(i){for(var t=e[i],n={x:[],y:[]},r=0;r<this.size;r++)n.x.push(r),n.y.push(r);return t.x>0&&(n.x=n.x.reverse()),t.y>0&&(n.y=n.y.reverse()),n},this.calculateNextPosition=function(i,t){var n,r=e[t];do{n=i,i={x:n.x+r.x,y:n.y+r.y}}while(this.withinGrid(i)&&this.cellAvailable(i));return{newPosition:n,next:this.getCellAt(i)}},this.withinGrid=function(i){return i.x>=0&&i.x<this.size&&i.y>=0&&i.y<this.size},this.cellAvailable=function(i){return this.withinGrid(i)?!this.getCellAt(i):null},this.buildStartingPosition=function(){for(var i=0;i<this.startingTileNumber;i++)this.randomlyInsertNewTile()},this.tileMatchesAvailable=function(){for(var t=i.size*i.size,n=0;t>n;n++){var r=this._positionToCoordinates(n),o=this.tiles[n];if(o)for(var s in e){var l=e[s],a={x:r.x+l.x,y:r.y+l.y},h=this.getCellAt(a);if(h&&h.value===o.value)return!0}}return!1},this.getCellAt=function(i){if(this.withinGrid(i)){var t=this._coordinatesToPosition(i);return this.tiles[t]}return null},this.setCellAt=function(i,t){if(this.withinGrid(i)){var e=this._coordinatesToPosition(i);this.tiles[e]=t}},this.moveTile=function(i,t){var e={x:i.x,y:i.y};this.setCellAt(e,null),this.setCellAt(t,i),i.updatePosition(t)},this.forEach=function(t){for(var e=i.size*i.size,n=0;e>n;n++){var r=this._positionToCoordinates(n);t(r.x,r.y,this.tiles[n])}},this._positionToCoordinates=function(t){var e=t%i.size;return{x:e,y:(t-e)/i.size}},this._coordinatesToPosition=function(t){return t.y*i.size+t.x},this.insertTile=function(i){var t=this._coordinatesToPosition(i);this.tiles[t]=i},this.newTile=function(i,e){return new t(i,e)},this.removeTile=function(i){i=this._coordinatesToPosition(i),delete this.tiles[i]},this.samePositions=function(i,t){return i.x===t.x&&i.y===t.y},this.availableCells=function(){var i=[],t=this;return this.forEach(function(e,n){t.getCellAt({x:e,y:n})||i.push({x:e,y:n})}),i},this.randomlyInsertNewTile=function(){var i=this.randomAvailableCell(),t=this.newTile(i,2);this.insertTile(t)},this.randomAvailableCell=function(){var i=this.availableCells();return i.length>0?i[Math.floor(Math.random()*i.length)]:void 0},this.anyCellsAvailable=function(){return this.availableCells().length>0},this}]}),angular.module("Grid").directive("grid",function(){return{restrict:"A",require:"ngModel",scope:{ngModel:"="},templateUrl:"scripts/grid/grid.html"}}),angular.module("Grid").directive("tile",function(){return{restrict:"A",scope:{ngModel:"="},templateUrl:"scripts/grid/tile.html"}}),angular.module("Keyboard",[]).service("KeyboardService",["$document","$rootScope",function(i,t){var e={37:"left",38:"up",39:"right",40:"down"};this.init=function(){var t=this;this.keyEventHandlers=[],i.bind("keydown",function(i){var n=e[i.which];n&&(i.preventDefault(),t._handleKeyEvent(n,i))})},this.on=function(i){this.keyEventHandlers.push(i)},this._handleKeyEvent=function(i,e){var n=this.keyEventHandlers;if(n&&(e.preventDefault(),n))for(var r=0;r<n.length;r++){(0,n[r])(i,e)}t.$apply()}}]),angular.module("Game",["Grid","ngCookies"]).service("GameManager",["$q","$timeout","GridService","$cookieStore",function(i,t,e,n){this.getHighScore=function(){return parseInt(n.get("highScore"))||0},this.grid=e.grid,this.tiles=e.tiles,this.gameSize=e.getSize(),this.winningValue=2048,this.reinit=function(){this.gameOver=!1,this.win=!1,this.currentScore=0,this.highScore=this.getHighScore()},this.reinit(),this.newGame=function(){e.buildEmptyGameBoard(),e.buildStartingPosition(),this.reinit()},this.move=function(t){var n=this;return i.when(function(){if(n.win)return!1;var i=e.traversalDirections(t),r=!1,o=!1;e.prepareTiles(),i.x.forEach(function(s){i.y.forEach(function(i){var l={x:s,y:i},a=e.getCellAt(l);if(a){var h=e.calculateNextPosition(a,t),u=h.next;if(u&&u.value===a.value&&!u.merged){var c=2*a.value,d=e.newTile(a,c);d.merged=[a,h.next],e.insertTile(d),e.removeTile(a),e.moveTile(d,u),n.updateScore(n.currentScore+h.next.value),d.value>=n.winningValue&&(o=!0),r=!0}else e.moveTile(a,h.newPosition);e.samePositions(l,h.newPosition)||(r=!0)}})}),o&&!n.win&&(n.win=!0),r&&(e.randomlyInsertNewTile(),(n.win||!n.movesAvailable())&&(n.gameOver=!0))}())},this.movesAvailable=function(){return e.anyCellsAvailable()||e.tileMatchesAvailable()},this.updateScore=function(i){this.currentScore=i,this.currentScore>this.getHighScore()&&(this.highScore=i,n.put("highScore",i))}}]),n.run(["$templateCache",function(i){i.put("scripts/grid/grid.html",'<div id="game-{{ ngModel.gameSize }}">\n  <div class="grid-container">\n    <div class="grid-cell" ng-repeat="cell in ngModel.grid track by $index"></div>\n  </div>\n\n  <div class="tile-container">\n    <div tile \n          ng-model=\'tile\'\n          ng-repeat=\'tile in ngModel.tiles track by $id(tile.id || $index)\'></div>\n  </div>\n</div>'),i.put("scripts/grid/tile.html",'<div ng-if=\'ngModel\' class="tile position-{{ ngModel.x }}-{{ ngModel.y }} tile-{{ ngModel.value }}" \n  ng-class="{ \'tile-merged\': ngModel.merged}">\n  <div class="tile-inner">\n    {{ ngModel.value }}\n  </div>\n</div>\n')}])});